// don't edit this please, it was auto-generated by hsss
// https://github.com/slact/hsss

typedef struct {
  // helper function that we use to sort the multi bulk output of 
  // non-deterministic commands, when containing 'false' elements
  char *compare_func;

  //strict.lua from: http://metalua.luaforge.net/src/lib/strict.lua.html.
  // Modified to be adapted to Redis.
  char *enable_strict;

  // a helper function we use for pcall error reporting.
  // Note that when the error is in the C function we want to report the
  // information about the caller, that's what makes sense from the point
  // of view of the user debugging a script.
  char *error_handler_func;

} redisLuaScripts;

static redisLuaScripts luaScript = {
  //compare_func
  "-- helper function that we use to sort the multi bulk output of \n"
  "-- non-deterministic commands, when containing 'false' elements\n"
  "function __redis__compare_helper(a,b)\n"
  "  if a == false then a = '' end\n"
  "  if b == false then b = '' end\n"
  "  return a<b\n"
  "end\n",

  //enable_strict
  "--strict.lua from: http://metalua.luaforge.net/src/lib/strict.lua.html.\n"
  "-- Modified to be adapted to Redis.\n"
  "local dbg=debug\n"
  "local mt = {}\n"
  "setmetatable(_G, mt)\n"
  "mt.__newindex = function (t, n, v)\n"
  "  if dbg.getinfo(2) then\n"
  "    local w = dbg.getinfo(2, \"S\").what\n"
  "    if w ~= \"main\" and w ~= \"C\" then\n"
  "      error(\"Script attempted to create global variable '\"..tostring(n)..\"'\", 2)\n"
  "    end\n"
  "  end\n"
  "  rawset(t, n, v)\n"
  "end\n"
  "mt.__index = function (t, n)\n"
  "  if dbg.getinfo(2) and dbg.getinfo(2, \"S\").what ~= \"C\" then\n"
  "    error(\"Script attempted to access unexisting global variable '\"..tostring(n)..\"'\", 2)\n"
  "  end\n"
  "  return rawget(t, n)\n"
  "end\n"
  "debug = nil\n",

  //error_handler_func
  "-- a helper function we use for pcall error reporting.\n"
  "-- Note that when the error is in the C function we want to report the\n"
  "-- information about the caller, that's what makes sense from the point\n"
  "-- of view of the user debugging a script.\n"
  "local dbg = debug\n"
  "function __redis__err__handler(err)\n"
  "  local i = dbg.getinfo(2,'nSl')\n"
  "  if i and i.what == 'C' then\n"
  "    i = dbg.getinfo(3,'nSl')\n"
  "  end\n"
  "  if i then\n"
  "    return i.source .. ':' .. i.currentline .. ': ' .. err\n"
  "  else\n"
  "    return err\n"
  "  end\n"
  "end\n"
};

